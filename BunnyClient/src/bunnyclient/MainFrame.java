/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package bunnyclient;

import connector.ServerConnector;
import controller.SendPointContoller;
import controller.SendShootMessageController;
import controller.SendXYController;
import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.rmi.NotBoundException;
import java.rmi.RemoteException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JLabel;
import observerImpl.SenShootMessageObserverImpl;
import observerImpl.SendPointsObserverImpl;
import observerImpl.SendXYObserverImpl;
import sun.audio.AudioData;
import sun.audio.AudioPlayer;
import sun.audio.AudioStream;
import sun.audio.ContinuousAudioDataStream;

/**
 *
 * @author LAHIRU
 */
public class MainFrame extends javax.swing.JDialog {

    /**
     * Creates new form MainFrame
     */
    private Point s1location;
    private Point s2location;
    private Point s3location;
    private Point s4location;
    private Point s5location;
    private int x[] = new int[5];
    private int y[] = new int[5];
    private List<JLabel> labelList = new ArrayList<>();
    int X = 0;
    int Y = 0;
    private int count = 5;
    private boolean b1 = true;
    private boolean b2 = true;
    private boolean b3 = true;
    private boolean b4 = true;
    private boolean b5 = true;
    private String name;
    private SendPointContoller sendPointContoller;
    private SendShootMessageController sendShootMessageController;

    public MainFrame(java.awt.Frame parent, boolean modal, String name) {
        super(parent, modal);
        this.name = name;
        setTitle("The Classic Naval War Game - BattleShip");
        initComponents();
        setSize(840, 755);

        seaLabel.addMouseListener(new MouseAdapter() {
            public void mouseClicked(MouseEvent e) {
                X = e.getX();
                Y = e.getY();
            }
        });
        try {
            SendXYController sendXYController = ServerConnector.getServerConnector().getSendXYController();
            SendXYObserverImpl sendXYObserverImpl = new SendXYObserverImpl(this);
            sendXYController.addSendXYObserver(sendXYObserverImpl);
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sendPointContoller = ServerConnector.getServerConnector().getSendPointContoller();
            SendPointsObserverImpl sendPointsObserverImpl = new SendPointsObserverImpl(this);
            sendPointContoller.addSendPointObserver(sendPointsObserverImpl);
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        try {
            sendShootMessageController = ServerConnector.getServerConnector().setSendShootMessageController();
            SenShootMessageObserverImpl senShootMessageObserverImpl = new SenShootMessageObserverImpl(this);
            sendShootMessageController.addSendShootMessageObserver(senShootMessageObserverImpl);
        } catch (NotBoundException | MalformedURLException | RemoteException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        s1 = new javax.swing.JLabel();
        s3 = new javax.swing.JLabel();
        s4 = new javax.swing.JLabel();
        s2 = new javax.swing.JLabel();
        s5 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        messageText = new javax.swing.JLabel();
        countLabel = new javax.swing.JLabel();
        seaLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });
        getContentPane().setLayout(null);

        s1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ship103.gif"))); // NOI18N
        s1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                s1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                s1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                s1MouseExited(evt);
            }
        });
        getContentPane().add(s1);
        s1.setBounds(0, 0, 150, 120);

        s3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/ship_021.gif"))); // NOI18N
        s3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                s3MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                s3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                s3MouseExited(evt);
            }
        });
        getContentPane().add(s3);
        s3.setBounds(0, 236, 135, 90);

        s4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/sails_9.gif"))); // NOI18N
        s4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                s4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                s4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                s4MouseExited(evt);
            }
        });
        getContentPane().add(s4);
        s4.setBounds(0, 375, 143, 111);

        s2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/vikings_ship_sailing-rowing.gif"))); // NOI18N
        s2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                s2MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                s2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                s2MouseExited(evt);
            }
        });
        getContentPane().add(s2);
        s2.setBounds(10, 120, 125, 100);

        s5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/sailing_10.gif"))); // NOI18N
        s5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                s5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                s5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                s5MouseExited(evt);
            }
        });
        getContentPane().add(s5);
        s5.setBounds(10, 500, 90, 70);

        jLabel1.setFont(new java.awt.Font("Tempus Sans ITC", 1, 24)); // NOI18N
        jLabel1.setText("Opposition ships");
        getContentPane().add(jLabel1);
        jLabel1.setBounds(420, 680, 190, 33);

        messageText.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        getContentPane().add(messageText);
        messageText.setBounds(170, 680, 240, 30);

        countLabel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        getContentPane().add(countLabel);
        countLabel.setBounds(610, 680, 40, 30);

        seaLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/seasea.jpg"))); // NOI18N
        seaLabel.setText(" ");
        getContentPane().add(seaLabel);
        seaLabel.setBounds(0, 0, 830, 715);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void s1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s1MouseClicked
        if (b1) {
            s1.setLocation(X, Y);
            System.out.println("s1.getLocation :"+s1.getLocation());
            b1 = false;
        }
    }//GEN-LAST:event_s1MouseClicked

    private void s2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s2MouseClicked
        if (b2) {
            s2.setLocation(X, Y);
            System.out.println("s2.getLocation :"+s2.getLocation());
            b2 = false;
        }
    }//GEN-LAST:event_s2MouseClicked

    private void s3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s3MouseClicked
        if (b3) {
            s3.setLocation(X, Y);
            System.out.println("s3.getLocation :"+s3.getLocation());
            b3 = false;
        }
    }//GEN-LAST:event_s3MouseClicked

    private void s4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s4MouseClicked
        if (b4) {
            s4.setLocation(X, Y);
            System.out.println("s4.getLocation :"+s4.getLocation());
            b4 = false;
        }
    }//GEN-LAST:event_s4MouseClicked

    private void s5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s5MouseClicked
        if (b5) {
            s5.setLocation(X, Y);
            System.out.println("s5.getLocation :"+s5.getLocation());
            b5 = false;
        }
    }//GEN-LAST:event_s5MouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
    }//GEN-LAST:event_formMouseClicked

    private void s1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s1MouseEntered
        Cursor cursor = new Cursor(Cursor.HAND_CURSOR);
        s1.setCursor(cursor);
    }//GEN-LAST:event_s1MouseEntered

    private void s1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s1MouseExited
        Cursor cursor = new Cursor(Cursor.DEFAULT_CURSOR);
        s1.setCursor(cursor);
    }//GEN-LAST:event_s1MouseExited

    private void s2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s2MouseEntered
        Cursor cursor = new Cursor(Cursor.HAND_CURSOR);
        s2.setCursor(cursor);
    }//GEN-LAST:event_s2MouseEntered

    private void s2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s2MouseExited
        Cursor cursor = new Cursor(Cursor.DEFAULT_CURSOR);
        s2.setCursor(cursor);
    }//GEN-LAST:event_s2MouseExited

    private void s3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s3MouseEntered
        Cursor cursor = new Cursor(Cursor.HAND_CURSOR);
        s3.setCursor(cursor);
    }//GEN-LAST:event_s3MouseEntered

    private void s3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s3MouseExited
        Cursor cursor = new Cursor(Cursor.DEFAULT_CURSOR);
        s3.setCursor(cursor);
    }//GEN-LAST:event_s3MouseExited

    private void s4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s4MouseEntered
        Cursor cursor = new Cursor(Cursor.HAND_CURSOR);
        s4.setCursor(cursor);
    }//GEN-LAST:event_s4MouseEntered

    private void s4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s4MouseExited
        Cursor cursor = new Cursor(Cursor.DEFAULT_CURSOR);
        s4.setCursor(cursor);
    }//GEN-LAST:event_s4MouseExited

    private void s5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s5MouseEntered
        Cursor cursor = new Cursor(Cursor.HAND_CURSOR);
        s5.setCursor(cursor);
    }//GEN-LAST:event_s5MouseEntered

    private void s5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_s5MouseExited
        Cursor cursor = new Cursor(Cursor.DEFAULT_CURSOR);
        s5.setCursor(cursor);
    }//GEN-LAST:event_s5MouseExited
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainFrame dialog = new MainFrame(new javax.swing.JFrame(), false, "");
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel countLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel messageText;
    private javax.swing.JLabel s1;
    private javax.swing.JLabel s2;
    private javax.swing.JLabel s3;
    private javax.swing.JLabel s4;
    private javax.swing.JLabel s5;
    private javax.swing.JLabel seaLabel;
    // End of variables declaration//GEN-END:variables

    public void sendMessage(int count, boolean b, String playerName) {
        if (!playerName.equals(this.name)) {
            System.out.println("count :" + count);
           // countLabel.setText(count + "");
        }
    }

    public void setXY(int x, int y, String playerName, boolean lock) {
        String s;
        boolean b=true;
        if (!this.name.equals(playerName)) {
            System.out.println("X :" + x);
            System.out.println("Y :" + y);
            
            Point location=new Point(x, y);
            System.out.println("message.getLocation :"+location);
            messageText.setText("");
            if ((s1.getLocation().getX()< x && s1.getLocation().getX()+150 >x) && (s1.getLocation().getY()< y && s1.getLocation().getY()+150 >y)) {
                if (b) {
                    s1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bomb2.gif")));
                    blastSound();
                    count = count - 1;
                    try {
                        sendPointContoller.sendPoint(count, true, this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        sendShootMessageController.sendIsShoot("One ship blast..", this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                }
            } else if ((s2.getLocation().getX()< x && s2.getLocation().getX()+150 >x) && (s2.getLocation().getY()< y && s2.getLocation().getY()+150 >y) ) {
                if (b) {
                    s2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bomb2.gif")));
                    blastSound();
                    count = count - 1;
                    try {
                        sendPointContoller.sendPoint(count, true, this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        sendShootMessageController.sendIsShoot("One ship blast..", this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    b = false;
                }
            } else if ((s3.getLocation().getX()< x && s3.getLocation().getX()+150 >x) && (s3.getLocation().getY()< y && s3.getLocation().getY()+150 >y)) {
                if (b) {
                    s3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bomb2.gif")));
                    blastSound();
                    count = count - 1;
                    try {
                        sendPointContoller.sendPoint(count, true, this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        sendShootMessageController.sendIsShoot("One ship blast..", this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    b = false;
                }
            } else if ((s4.getLocation().getX()< x && s4.getLocation().getX()+150 >x) && (s4.getLocation().getY()< y && s4.getLocation().getY()+150 >y)) {
                if (b) {
                    s4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bomb2.gif")));
                    blastSound();
                    count = count - 1;
                    try {
                        sendPointContoller.sendPoint(count, true, this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        sendShootMessageController.sendIsShoot("One ship blast..", this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    b = false;
                }
            } else if ((s5.getLocation().getX()< x && s5.getLocation().getX()+150 >x) && (s5.getLocation().getY()< y && s5.getLocation().getY()+150 >y) ) {
                if (b) {
                    s5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Bomb2.gif")));
                    blastSound();
                    count = count - 1;
                    try {
                        sendPointContoller.sendPoint(count, true, this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    try {
                        sendShootMessageController.sendIsShoot("One ship blast..", this.name);
                    } catch (RemoteException ex) {
                        Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    b = false;
                }
            } else {
                try {
                    sendShootMessageController.sendIsShoot("Target Missing...", this.name);
                } catch (RemoteException ex) {
                    Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }
    }

    public void setShootMessage(String isShoot, String name) {
        if (!this.name.equals(name)) {
            messageText.setText(isShoot);
        }
    }
    
    public static void blastSound() {       
        AudioPlayer MGP = AudioPlayer.player;
        AudioStream BGM;
        AudioData MD;

        ContinuousAudioDataStream loop = null;

        try{
            InputStream test = new FileInputStream("explosion-02.wav");
            BGM = new AudioStream(test);
            AudioPlayer.player.start(BGM);
            //MD = BGM.getData();
            //loop = new ContinuousAudioDataStream(MD);

        }catch(FileNotFoundException e){
            System.out.print(e.toString());
        }catch(IOException error){
            System.out.print(error.toString());
        }
        MGP.start(loop);
    }
}
